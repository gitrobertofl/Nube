package servidor; 

import java.util.Vector;
import java.util.Random;

/********************************************************************************
   
 *  PRACTICA DE SISTEMAS DISTRIBUIDOS (20-21).
 *
 * <div>Esta es la clase que representa la base de datos, que son las tablas
 * con cada una de la entidades de la misma y sus accesos</div>
 * 
 * <div>Implementa serializable pues sera consultada remotamente RMI</div>
 * 
 * <div>Para garantizar la exclusion mutua, todos los metodos son synchronized.
 * </div>
 * 
 * <div>Con licencia GPL v3</div>
 * 
 * @author Roberto J. de la Fuente Lopez 
 *         rfuente4@alumno.uned.es
 *         robertofl@aconute.es
 * 
 * @version 20201207
 * 
 ********************************************************************************/
public class Datos// implements Serializable
  {
  /*===========================================================================
    Atributos de la clase
  ==============================================================================*/   
  
  //cambiar a hashMap (no sincronizado) o Vector (sincronizado)
  private Vector<ClienteBD> clientes=new Vector<ClienteBD>(); // clientes
  private Vector<RepositorioBD> repositorios=new Vector<RepositorioBD>();// repositorios
  private Vector<RepoClieBD> repoClies=new Vector<RepoClieBD>();//asociacion repos con clientes
  private Vector<FicheroBD> ficheros=new Vector<FicheroBD>();//ficheros por cliente y repo
 
  /*===========================================================================
   * Constructores de la clase
   * ==========================================================================*/      
    
  /**********************************************************************************
   * Por defecto construye una estructura de datos vacia
   *********************************************************************************/
  public Datos()
    {
    //lo hacen las asignaciones por defecto    
    //inicializa los Clientes vacios.
    //inicializa contador
    //inicializa partidas
    }//fin constructor Datos()

  /*=================================================================================
   * Metodos publicos
   * ==============================================================================*/    
  
  //m�todos get 
  public synchronized Vector<ClienteBD> getListaClientes()
    {
    return clientes;
    }
   
  public synchronized Vector<RepositorioBD> getListaRepositorios()
    {
    return repositorios;  
    }
    
  public synchronized Vector<FicheroBD> getFicheros()
    {
    return ficheros;
    }
  
  //m�todos set. No hay
  
  //consultas/listados
  /**
   * <div> listadoClientes consulta todos los clientes registrados</div>
   * 
   * @return cadena con todos los clientes e IDsesion separados por salto de linea
   */
  public synchronized String listadoClientes()
    {
	final String SEPARADOR=",";  
    StringBuffer resultado= new StringBuffer("");
    int pos=0;
    while(pos<clientes.size())
       {
       resultado.append(String.format("%-10s ",((ClienteBD)this.clientes.get(pos)).getNombreCliente()));	
       resultado.append(SEPARADOR);
       resultado.append(((ClienteBD)this.clientes.get(pos)).getIDSesion());
       resultado.append("\n");
       pos++;
       }
    return resultado.toString();
    }//fin listadoClientes
    
  /**
   * <div>listadoRepositorios consulta de todos los repositorios registrados</div>
   *
   *  @return cadena con todos los repositorios e IDsesion separados por salto de l�nea
   */
  public synchronized String listadoRepositorios()
    {
	final String SEPARADOR=","; 
    StringBuffer resultado= new StringBuffer("");
    int pos=0;
    while(pos<repositorios.size())
       {
       resultado.append((String.format("%-10s",((RepositorioBD)this.repositorios.get(pos)).getNombreRepositorio())));
       resultado.append(SEPARADOR);
       resultado.append(((RepositorioBD)this.repositorios.get(pos)).getIDSesion());
       resultado.append("\n");
       pos++;
       }
    return resultado.toString();
    }//fin listadoRepositorios
    
  /**
   * <div>listadoRepoclie consulta todos los repositorios con sus clientes asociados</div>
   * 
   * @return cadena con los ID de repositorio seguido de ID de cliente
   */
  public synchronized String listadoRepoClie()
    {
	final String SEPARADOR=",";   
    StringBuffer resultado= new StringBuffer("");
    int pos=0;
    while(pos<repoClies.size())
       {
       resultado.append(((String.format("%-10s",((RepoClieBD)this.repoClies.get(pos)).getNombreRepositorio()+" "))));
       resultado.append(SEPARADOR);
       resultado.append(((RepoClieBD)this.repoClies.get(pos)).getNombreCliente());
       resultado.append("\n");
       pos++;
       }
    return resultado.toString();
    }//fin listadoRepositorios
  
  /**
   * <div> ListadoClientesRepo consulta los clientes de un repositorio concreto</div>
   * 
   * @param requiere el ID de un repositorio
   * @return cadena con los ID de los clientes asociados al repositorio del par�metro
   */   
  public synchronized String listadoClientesRepo(String IDRepositorio)
    {
	StringBuffer resultado= new StringBuffer("");
    int pos=0;
    while(pos<repoClies.size())
       {
       //solo los que coincida el IDRepositorio
       if  (((RepoClieBD)this.repoClies.get(pos)).getNombreRepositorio().equals(IDRepositorio))   
         {  
         resultado.append(((RepoClieBD)this.repoClies.get(pos)).getNombreCliente());
         resultado.append("\n");
        }
       pos++;
       } 
    return resultado.toString();
    }//fin listadoClientesRepo
   
  /**
   * <div>listadoFicheroCliente consulta los ficheros de un cliente en un repositorio
   * @param requiere el ID de un repositorio
   * @param requiere el ID de un cliente (no es requerido que est� asociado)
   * @return cadena con los nombres de los ficheros almacenados(sin ruta)
   */  
  public synchronized String listadoFicherosCliente(String IDRepositorio, String IDCliente)
    {
    StringBuffer resultado= new StringBuffer("");
    int posFichero=0;
	
    while(posFichero<ficheros.size())
       {
	   FicheroBD auxFichero= (FicheroBD)this.ficheros.get(posFichero);
	   //si esta compartido por otro lo mete
       if (auxFichero.estaCompartido())
	     {
		 resultado.append("Fichero : "+auxFichero.getNombreFichero());
         resultado.append(" en  repositorio "+auxFichero.getNombreRepositorio());
         resultado.append(" compartido por "+auxFichero.getNombreCliente());
		 resultado.append("\n");		 
		 	 
		 }//fin si compartido por otros  
        else
	     //solo los que coincida el IDCliente
         if (auxFichero.getNombreCliente().equals(IDCliente))   
           {  
           resultado.append("Fichero : "+auxFichero.getNombreFichero());
           resultado.append(" en  repositorio "+auxFichero.getNombreRepositorio());
           resultado.append("\n");
           }
		posFichero++;
       }//fin while posFichero 
	   
	   
    return resultado.toString();
    }//fin listadoficheroscliente
    
  //altas
  /**********************************************************************************
   * <div>Este metodo anade un Repositorio nuevo a la base de datos</div>
   * <div>Primero comprueba que el Repositorio no existe y si es asi lo anade.</div>
   * 
   * @param  nombre es una cadena con el nombre de Repositorio
   * @param pwd es la cadena que representa la contrase�a
   * @return objeto TRUE si se efectuo con exito, FALSO en caso contrario (ya existe)
   * @see existeRepositorio(String nombre)
   *********************************************************************************/
  public synchronized Boolean insertaRepositorio(String nombre, String pwd)
    {
    boolean anadido=false;
    // si no existe, lo anade
    if (!this.existeRepositorio(nombre))
      {
      this.repositorios.add(new RepositorioBD(nombre,pwd));
      anadido=true;
      verRepositorios();
      }
    return anadido;
    }//fin addRepositorio   
    
  /**********************************************************************************
   * <div>Este metodo anade un Cliente nuevo a la base de datos</div>
   * <div>Primero comprueba que el Cliente no existe y si es asi lo anade.</div>
   * 
   * @param  nombre es una cadena con el nombre de Cliente
   * @param pwd es la cadena que representa la contrasena
   * @return objeto TRUE si se efectuo con exito, FALSO en caso contrario (ya existe)
   * @see existeCliente(String nombre)
   *********************************************************************************/
  public synchronized Boolean insertaCliente(String nombre, String pwd)
    {
    boolean anadido=false;
    // si no existe, lo anade
    if (!this.existeCliente(nombre))
      {
      this.clientes.add(new ClienteBD(nombre,pwd));
      anadido=true;
      }
    return anadido;
    }//fin addCliente
 
  /**
   * <div> A�ade el nombre de fichero del cliente y repositorio indicado</div>
   * <div> no comprueba que el cliente y repositorio est�n asociados</div>
   * 
   * @param cadena con el ID de cliente
   * @param cadena con el ID de repositorio
   * @param cadena con el nombre del fichero (sin ruta)
   * 
   */  
  public synchronized void altaFichero(String IDCliente, String IDRepo, String nFichero)
    {
    this.ficheros.add(new FicheroBD(IDCliente,IDRepo,nFichero));
    this.verFicheros();
    }//fin altaFichero
      
  //bajas
  
   
  public synchronized Boolean borrarFichero(String IDCliente, String IDRepo, String nFichero)
    {
	int pos=0;
    Boolean encontrado=false;
    //busca el fichero 
	while(pos<ficheros.size())
      {
	  FicheroBD siguiente=(FicheroBD)this.ficheros.get(pos);  
      if ((siguiente.getNombreRepositorio().equals(IDRepo))
		  && (siguiente.getNombreCliente().equals(IDCliente))
          && (siguiente.getNombreFichero().equals(nFichero) ))
         {
         //si esta, lo borra
		 this.ficheros.remove(pos);
		 encontrado=true;
         pos=ficheros.size();    
         }
        else
         pos++;
       }
     
	 return encontrado;
	 
    }//fin borrarFichero
 
  //modificaciones
  
  /**
   * <div> asignarRepoclie asigna un cliente al repositorio:</div>
   * <ul> Si ya estaba asignado, obtiene el ID del repositorio
   * <ul> si no tiene asignado, le da uno de los activos, si lo hay; comprueba si
   * hay alguno activo, si lo hay elige aleatoriamente uno de los activos (evita que
   * siempre se coja el primero, lo que sobrecargara siempre el mismo, si estan todos
   * activos).
   * 
   * @param necesita el ID del cliente a asignar
   * @return devuelve el ID del repositorio asignado, cadena vacia si no
   * se asigna por no estar disponible.
   */
  public synchronized String asignarRepoClie(String IDCliente)
    {
	String IDRepositorio="";
    int pos=0;
    Boolean encontrado=false;
    Random random = new Random();
    if (repositorios.size()!=0)
      {
      //busca si hay repo asignado    
      while(pos<repoClies.size())
       {
       //si lo hay, lo reasigna y sale  
       if (((RepoClieBD)this.repoClies.get(pos)).getNombreCliente().equals(IDCliente))    
         {
           
         IDRepositorio=((RepoClieBD)this.repoClies.get(pos)).getNombreRepositorio();
         pos=repoClies.size(); 
         encontrado=true;
         }    
       pos++;
       }//fin busqueda de cliente
      //sin no encontro, asigna un activo, si hay
      if (!encontrado)
        {
        pos=0;
        
        while(pos<repositorios.size())
          {
          //"" significa que no est� activo    
          if (!(((RepositorioBD)this.repositorios.get(pos)).getIDSesion().equals("")))
            {
            encontrado=false;
            do//sabemos que hay al menos uno activo, repetimos hasta que encuentre ese u otro            do //repetimos hasta uno activo.
              {
              //sobre repositorios.size(), obtener un n�mero al azar 
              pos=random.nextInt(repositorios.size());
              if  (!((RepositorioBD)this.repositorios.get(pos)).getIDSesion().equals(""))   
                {
                encontrado=true;
                //actualizar la base de datos y devolver el nombre elegido.
                IDRepositorio=((RepositorioBD)this.repositorios.get(pos)).getNombreRepositorio();
                this.repoClies.add(new RepoClieBD(IDCliente, IDRepositorio));
                }//fin si es activo
              }//fin dowhile
            while (!encontrado);
            pos=repositorios.size();    
            }
           else //no encontro uno activo
            pos++;
          }//fin bucle    
        }//fin si no hay asignado
      }//fin si hay repositorios
     
    return IDRepositorio;
    }//fin asignar repoclie
   
     
  /**
   * <div> desactivarRepositorio es necesario antes de cerrar sesion 
   * para quitar el ID de sesion.</div>
   * 
   * <div> AHORA NO COMPRUEBA QUE HAYA CLIENTES ACTIVOS USa�NDOLO</DIV>
   * 
   * @param Requiere el ID del repositorio a desactivar
   * 
   */
  public synchronized Boolean desactivarRepositorio(String IDRepositorio)
         
    {
    Boolean desactivado=false;    
    int pos=0;
     while(pos<repositorios.size())
       {
       if (((RepositorioBD)this.repositorios.get(pos)).getNombreRepositorio().equals(IDRepositorio))
         {
         //debe comprobar si tiene alg�n cliente activo    
         ((RepositorioBD)this.repositorios.get(pos)).setIDSesion("");
         desactivado=true;
         pos=repositorios.size();    
         }
        else
         pos++;
       }
    return desactivado;    
    }//fin desactivarRepositorio
 
  /**
   * <div> desactivarCliente es necesario antes de cerrar sesi�n para quitar el
   * ID de sesion.</div>
   * 
   * @param requiere el ID del cliente a desactivar
   */
  public synchronized  void desactivarCliente(String IDCliente)
         
    {
    //boolean encontrado=false;
     int pos=0;
     while(pos<clientes.size())
       {
       if (((ClienteBD)this.clientes.get(pos)).getNombreCliente().equals(IDCliente))
         {
         ((ClienteBD)this.clientes.get(pos)).setIDSesion("");
         pos=clientes.size();    
         }
        else
         pos++;
       }
        
    }//fin desactivarCliente     
    
	public synchronized Boolean compartirFichero(String iDCliente, String iDRepositorio, String nFichero)
	  {
	  boolean encontrado=false;
      int pos=0;
     
      
      while(pos<repositorios.size())
        {
        FicheroBD siguiente=(FicheroBD)this.ficheros.get(pos);  
        if ((siguiente.getNombreRepositorio().equals(iDRepositorio))
     			  && (siguiente.getNombreCliente().equals(iDCliente))
     	          && (siguiente.getNombreFichero().equals(nFichero) ))
	      {
          encontrado=true;
		  siguiente.compartir();
		  pos=ficheros.size();    
		  }
        pos++;
        }
      return encontrado;  
       }//fin compartir fichero
	
  //consultas
  
  /**********************************************************************************
   * <div> existeRepositorio nos dice si el ID del repositorio existe en la BD</div>
   * 
   * @param  requiere una cadena con el ID del repositorio
   * @return objeto TRUE si ya existe FALSO en caso contrario o vac�o
   *********************************************************************************/
   public synchronized Boolean existeRepositorio(String nombre)
     {
     boolean encontrado=false;
     int pos=0;
     while((pos<repositorios.size())&&(!encontrado))
       {
       if (((RepositorioBD)this.repositorios.get(pos)).getNombreRepositorio().equals(nombre))
         encontrado=true;
       pos++;
       }
     return encontrado;  
     }//fin clienteEncontrado     
  
  /**********************************************************************************
   * <div> existecliente nos dice si el ID del cliente existe en la BD</div>
   * 
   * @param  requiere una cadena con el ID del Cliente
   * @return objeto TRUE si ya existe FALSO en caso contrario o vac�o
   *********************************************************************************/
   public synchronized Boolean existeCliente(String nombre)
     {
     boolean encontrado=false;
     int pos=0;
     while((pos<clientes.size())&&(!encontrado))
       {
       if (((ClienteBD)this.clientes.get(pos)).getNombreCliente().equals(nombre))
         encontrado=true;
       pos++;
       }
     return encontrado;  
     }//fin clienteEncontrado
  
  /**
   * <div>existeFichero nos dice si ya existe para el cliente y repositorio correspondiente</div>
   * 
   * @param requiere cadena con el ID del cliente
   * @param requiere cadena con el ID del repositorio
   * @param requiere cadena con el nombre del fichero (sin ruta)
   * @return TRUE si se encontro, FALSE en caso contrario.
   */  
  public synchronized Boolean existeFichero(String IDCliente, String IDRepo,String nombreFichero)   
    {
     Boolean encontrado=false;
     int pos=0;
     while((pos<ficheros.size())&&(!encontrado))
       {
       //si coinciden los tres par�metros
       if (((FicheroBD)this.ficheros.get(pos)).getNombreFichero().equals(nombreFichero)
       &&
       ((FicheroBD)this.ficheros.get(pos)).getNombreCliente().equals(IDCliente)
       &&
       ((FicheroBD)this.ficheros.get(pos)).getNombreRepositorio().equals(IDRepo)
       )
         encontrado=true;
       pos++;
       }
     return encontrado;  
     }//fin existefichero   
   
  /**********************************************************************************
   * <div> Este metodo nos dice si los datos de acceso de un repositorio (ID, contrasena)
   * son iguales a los de los parametros.</div>
   * <div> Se utiliza en la autenticaci�n de repositorio</div>
   * <div> Si los datos son correctos, lo marca como activo (asigna ID sesi�n)</div>
   * 
   * @param  cadena con el ID del repositorio
   * @param  cadena con la contrasena del repositorio
   * @return String con IDSesion o cadena vacia en caso de error.
   *********************************************************************************/
  public synchronized String existeRepositorioAcreditado(String nombre, String pwd)
    {
    String IDSesion="";
    int pos=0; 
    //((RepositorioBD)this.repositorios.get(pos)).
    while(pos<repositorios.size())
      {
      //si los par�metros ya pertenecen a un repositorio, marca encontrado y activo   
      if ((nombre.equals(((RepositorioBD)this.repositorios.get(pos)).getNombreRepositorio()))
           &&
          (pwd.equals(((RepositorioBD)this.repositorios.get(pos)).getPasswordRepositorio()))
          )
        {
        //si no est� activo (no admite dos sesiones), se asigna ID.
        if (((RepositorioBD)this.repositorios.get(pos)).getIDSesion().equals(""))
          {      
          //asignamos ID
          IDSesion=this.ObtenerIDSesion();
          ((RepositorioBD)this.repositorios.get(pos)).setIDSesion(IDSesion);
          }//fin si activo
        //se encontr�. finalizar bucle  
        pos=repositorios.size();  
        }//fin si encontrado 
       else 
        pos++;
      }//fin while pos<size
    return IDSesion;  
    }//fin RepositorioAcreditado     
  
  /**********************************************************************************
   * <div> Este metodo nos dice si los datos de acceso de un cliente (ID, contrasena)
   * son iguales a los de los parametros.</div>
   * <div> Se utiliza en la autenticacion de cliente</div>
   * <div> Si los datos son correctos, lo marca como activo (asigna ID sesion)</div>
   * <div> 
   * 
   * @param  cadena con el ID del cliente
   * @param  cadena con la contrasena del cliente
   * @return String con IDSesion o cadena vacia en caso de error.
   *********************************************************************************/   
  public synchronized String existeClienteAcreditado(String nombreCliente, String pwd)
    { 
	String ERROR_NO_REPO_DISPONIBLE="repo_no_disponible";
    String ERROR_SESION_ABIERTA="La sesión ya estaba abierta";	  
    String iDSesion="";
    String repositorioAsignado="";
    int pos=0;
    ClienteBD clienteAux;
    //((ClienteBD)this.clientes.get(pos)).getPasswordCliente();
    while(pos<clientes.size())
      {
      clienteAux=(ClienteBD)this.clientes.get(pos);	
      //si los parametros son correctos obtiene el cliente,
      if ((nombreCliente.equals(clienteAux.getNombreCliente()))
           &&
          (pwd.equals(clienteAux.getPasswordCliente()))
          )
        {
        //si no esta activo (no admite dos sesiones y no la sustituye) 
        //se asigna repositorio, si no lo tenia
        if (clienteAux.getIDSesion().equals(""))
          {
          repositorioAsignado=this.asignarRepoClie(nombreCliente);
          //si está en blanco es que no hay disponible ninguno
          //y por tanto no puede iniciar sesión
          if (!repositorioAsignado.equals(""))
            {
        	//asignamos ID
            iDSesion=this.ObtenerIDSesion();
            clienteAux.setIDSesion(iDSesion);  
        	}//fin si hay repo asignado
          else
        	iDSesion= ERROR_NO_REPO_DISPONIBLE; 
          } //fin sesion no iniciada
         else
          iDSesion=ERROR_SESION_ABIERTA;	
        //si encontro, salimos del bucle      
        pos=clientes.size();  
        }//fin si encontrado 
       
      pos++;
     
      }//fin mientras
    return iDSesion;  
    }//fin ClienteAcreditado  
 
  /************************************************************************************
   * <div> Obtenemos el ID del repositorio asignado a un cliente</div>
   * 
   * @param requiere una cadena con el ID del cliente
   * @return cadena con el ID del repositorio asignado, vacio si no lo tiene
   ***********************************************************************************/
   public synchronized String obtenerRepoClie(String IDCliente)
     {
     String IDRepositorio="";
     int pos=0;
     //busca repo asignado    
     while(pos<repoClies.size())
       {
       //si lo hay, lo asigna    
       if (((RepoClieBD)this.repoClies.get(pos)).getNombreCliente().equals(IDCliente))    
         {
         IDRepositorio=((RepoClieBD)this.repoClies.get(pos)).getNombreRepositorio();
         pos=repoClies.size();//sale 
         }    
       pos++;
       }//fin b�squeda de cliente
     return IDRepositorio;
     }//fin obtenerRepoClie
     
  
  //test???  
  public synchronized void verClientes()
    {
	final String SEPARADOR=" ,";  
	StringBuffer resultado= new StringBuffer("");
	int pos=0;
	while(pos<clientes.size())
	  {
	  ClienteBD aux=(ClienteBD)this.clientes.get(pos);
	  resultado.append(String.format("%-10s ",aux.getNombreCliente()));	
	  resultado.append(SEPARADOR);
	  resultado.append(aux.getIDSesion());
	  resultado.append(SEPARADOR);
	  resultado.append(aux.getPasswordCliente());
	  resultado.append("\n");
	  pos++;
	  }
	return resultado.toString();  
	}//fin verClientes  
  
    
    
  public synchronized void verRepositorios()
    {
    for (int i=0;i<repositorios.size();i++)
      {
      System.out.print("Repositorio "+i+" nombre : "+
                        ((RepositorioBD)repositorios.elementAt(i)).getNombreRepositorio());
      System.out.println(" pass : "+ ((RepositorioBD)repositorios.elementAt(i)).getPasswordRepositorio());
      
      RepositorioBD cl=(RepositorioBD)repositorios.elementAt(i);
      
      System.out.println(cl.toString());
      }
    }//fin verRepositorios   
  
   public synchronized void verFicheros()
     {
      for (int i=0;i<ficheros.size();i++)
      {
      System.out.print("Fichero cliente :"+ 
                            ((FicheroBD)ficheros.elementAt(i)).getNombreCliente());
      System.out.print(" repositorio :  "+
                            ((FicheroBD)ficheros.elementAt(i)).getNombreRepositorio()); 
       System.out.println(" nombre fichero :  "+
                            ((FicheroBD)ficheros.elementAt(i)).getNombreFichero());
		System.out.println(" compartido: "+
						((FicheroBD)ficheros.elementAt(i)).estaCompartido().toString());
						
       FicheroBD f=(FicheroBD)ficheros.elementAt(i);
       System.out.println(f.toString());
      }
        
     }//fin ver ficheros
  
  /*=================================================================================
   * Metodos privados
   * ==============================================================================*/    
    
  /**
   * <div> Calcula el ID de sesion. Obtiene una cadena de LONID caracteres alfanum�ricos
   * elegidos al azar, de forma que lo m�s probable es que sea unico (OJO)</div>
   *
   * @return cadena alfanumerica aleatoria de longitud LONGID
   */     
       
  private String ObtenerIDSesion()
    {
    final int LONGID=26;//longitud del ID
    //caracteres del ID      
    char[] caracteresID = "0123456789ABCDEFGHIJKLNMOPQRSTUVWZabcdefghijklmnopqrstuvwxyz".toCharArray();
    //creamos la cadena vac�a
    StringBuffer cadenaID = new StringBuffer(LONGID);
    
    Random random = new Random();
    //elegimos al azar un caracter de la lista hasta cubrir la cadena
    for (int i = 0; i < LONGID; i++)
       {
       char c = caracteresID[random.nextInt(caracteresID.length)];
       cadenaID.append(c);
       }
    //devolvemos el resultado   
    return cadenaID.toString();
    //return "cadena de sesion";
    }  
    
  }//fin de clase