package servidor;  


import java.rmi.*;
//import java.rmi.server.*;
import java.rmi.registry.Registry;
import java.rmi.registry.LocateRegistry;
import java.net.InetAddress;
//import java.io.Serializable;
/******************************************************************************
 * Esta clase continene toda la l�gica correspondiente al registro RMI
 * Si se utiliza en locahost, permite la creaci�n de un registro RMI. 
 * Si ya existe,simplemente crea la referencia al registro y la guarda.
 * Tambi�n contiene una URL v�lida de acceso al mismo.
 * Si se utiliza en un host distinto, permite la creacion de esa referencia 
 * que tiene registrados los objetos remotos de la aplicacion distribuida.
 * 
 * En todos los casos comprueba la conexi�n con el registro. Si no est� en
 * servicio pone a null el atributo resgistroRMI. 
 * Es decir, si registrRMI.isNull()==true, no hay servicio.
 * 
 * Por defecto utiliza la IP de localhost y el puerto predeterminado
 * del servicio RMI
 * 
 * Con licencia GPL v3 (a�adir enlace a la licencia)
 * 
 * @author Roberto J. de la Fuente Lopez 
 *         rfuente4@alumno.uned.es
 *         robertofl@aconute.es
 * @version 20201103
 * 
 ******************************************************************************/
public class RegistroRMI // implements Serializable
  {
  /*============================================================================
    Atributos de la clase
   ============================================================================*/
  //puerto por defecto del registro RMI 1099 
  private static Integer numPuertoRMI=Registry.REGISTRY_PORT; 
  //dir IP del registro RMI. Por defecto localhost
  private static String IPHostRegistro=obtenerIPLocalhost();
  private String URLBaseRegRMI=""; //URL base para el registro RMI
  // si es null significa que no encuentra registro válido  
  private Registry registroRMI=null;
  
  /*=========================================================================
    Constructores de la clase
   ==========================================================================*/    
  /***************************************************************************
   * Constructor por defecto. Crea una referencia valida al registro RMI 
   * en localhost y puerto por defecto 1099
   ***************************************************************************/
  public RegistroRMI()
    {
    //llama al constructor principal con los datos por defecto    
    this(IPHostRegistro,numPuertoRMI);//valores por defecto
    }//fin constructor  por defecto
    
  /***************************************************************************
   * Crea una referencia valida al registro RMI en localhost y puerto elegido
   * 
   * @param puerto un entero con el numero de puerto
   **************************************************************************/
  public RegistroRMI(Integer puerto)
    {
    this(IPHostRegistro,puerto);
    }//fin constructor Registro RMI(puerto)
  /***************************************************************************
   * Crea una referencia valida al registro RMI en host elegido y puerto
   * por defecto
   * 
   * @param IP una cadena con una IP valida 
   **************************************************************************/
  public RegistroRMI(String IP)
    {
    this(IP,numPuertoRMI);
    }//fin constructor REgistroRMI(IP)
  
  /***************************************************************************
   * Crea una referencia y URL v�lida al registro RMI en host y puerto elegido
   * Si la IP es la de localhost, comprueba si existe el registro, sino lo 
   * crea. Si alguno de los par�metros est� mal formado, 
   * deja los atributos en null
   * 
   * @param IP una cadena con una IP valida
   * @param puerto un entero con el numero de puerto
   *
   **************************************************************************/
  public RegistroRMI(String dirIP,Integer puerto)
    {
    //parser de IP(InetAddress) y de puerto. null si error
    
    //si no hay error, creamos URL y creamos referencia al registro        
    if((dirIP != null) && (puerto != null))
      {
      //this.numPuertoRMI=puerto;
      //this.IPHostRegistro=dirIP;
      this.URLBaseRegRMI="rmi://"+dirIP+":"+ puerto.toString();
      //si estamos en localhost, lo crea o referencia
      if (dirIP.equals(IPHostRegistro))
        {
        // lo primero es crear el registro RMI
        try
          {
          this.registroRMI =LocateRegistry.createRegistry(puerto);
          //si no lanza ExportException, no existia, lo ha creado  
          System.err.println("MSG:no existia registroRMI en localhost. creado \n");
          }//fin try
         catch (RemoteException exe)
          {
          System.err.println("MSG:fallo la exportacion,"+ 
                            "el registroRMI existia en localhost: "+ exe);
          //el registro existe, luego solo se obtiene la referencia
          try
            {
            this.registroRMI = LocateRegistry.getRegistry(puerto);
            System.out.println("Exist�a en localhost. "+
                                "Referencia al registro creada\n");
            }//fin try
           catch (RemoteException re)
            {
            System.out.println("error de registro de objeto : "+ re+"\n");  
            }//fin catch REmoteException
           catch (Exception e)
            {
            System.out.println("fallo conexión a registro RMI "+ e);  
            }//fin catch
          }//fin catch exportexceptiion
         catch (Exception e)
          {
          System.out.println("fallo en registro RMI ");
          System.out.println(e);
          }//fin catch generico registro RMI
        
        System.err.println("MSG: conexion al registro local satisfactoria");  
        }//fin si la IP es localhost
       else
        { 
        //si no es la misma IP  comprueba que existe el registro remoto
    	   
        try
          {
          //obtiene la referencia al registro en la IP y puerto indicado
          this.registroRMI = 
                LocateRegistry.getRegistry(dirIP,puerto);
          System.err.println("referencia al registro creada a servidor remoto\n");
          //probamos conexión con el registro
          this.registroRMI.list();
          //si no lanza excepci�n, conexi�n correcta.
          System.err.println("MSG:conexion al registro remoto en "+dirIP+":"+
                             puerto +" satisfactoria");
          }//fin try
         catch (RemoteException re)
          {
          System.out.println("Error de comunicacion con registroRMI : "+ re+"\n");
          //registro no disponible, se pone a null para indicar que no funciona
          this.registroRMI=null;
          }//fin catch REmoteException
         catch (Exception e)
          {
          System.out.println("fallo de registro RMI en servidor : "+ e);
          this.registroRMI=null;
          }//fin catch
        }//fin si no es localhost  
          
      }//fin si todo correcto
     else
      {
      //si hay error en el formato de IP o Puerto, atributos por defecto.    
      System.out.println("error de formato en ip o puerto. Registro no identificado");  
      }
     //hay que probar que la referencia es válida 
    }//fin registroRMI (ip,puerto)
     
  /*======================================================================
    Metodos privados
   * =====================================================================*/    
  /***************************************************************************
   *  El metodo obtenerIPLocalhost recupera la dirección IP del host local.
   *  De esta forma abstraemos a la aplicación del tipo de IP subyacente
   *  del host.
   *  
   *  @return devuelve un String con la dirección IP o null si hubo problema
  ****************************************************************************/  
  private static String obtenerIPLocalhost()
    {
    String hostIP=null;   
    try
      {
      //primero obtenemos la cadena con la direccion de localhost 
      //da por supuesto que es la primera disponible--- OJO CON VARIAS CONEXIONES DE RED
      hostIP=InetAddress.getLocalHost().getHostAddress();
      System.out.println("la direcci�n IP de servicio RMI es "+hostIP);
      }
     catch (java.net.UnknownHostException he) 
      {
      System.out.println("host de registro no encontrado: + he");  
      }//fin catch no se encontro el host con el registro
    return hostIP; 
    }//fin obtenerIPLocalhost ()

  /*======================================================================
    Metodos publicos
   * =====================================================================*/    
  
  /****************************************************************************
   *  El metodo refRegistroRMI, obtiene una referencia al registro RMI
   *  almacenado en el atributo registrRMI.
   *  
   *  @return devuelve una referencia al registro remoto; null si no est� activo
   ****************************************************************************/  
  public Registry getRefRegistroRMI()
    {
    return registroRMI;  
    }//fin refREgistroRMI
  
  /****************************************************************************
   *  El metodo getURLRegistroRMI obtiene un String con la URL base del
   *  registro RMI utilizado
   *  
   *  @return devuelve una cadena con la URL; null si no está activo
   */  
  public String getURLBaseRegRMI()
    {
    return URLBaseRegRMI;
    }
  
  /********************************************************************************
   *  El metodo getURLObjetoRegistros, obtiene una cadena con una URL base del 
   *  registro concatenado al nombre del objeto registrado.
   *  
   *  
   *  @param bind.- recibe una cadena con el nombre simbolico del objeto remoto
   *                    sin barra separadora.
   *  @return devuelve una cadena con la referencia completa del objeto remoto 
   *  en el registro RMI
   *******************************************************************************/  
  public String getURLobjetoRegistrado(String bind)
    {
    return URLBaseRegRMI+"/"+bind; 
    
    }//fin getURLobjetoRegistrado(String bind)

//métodos registro servicios
 /******************************************************************************
   * <div>Método para la gestión del registro RMI.</div>
   * <div>Se registra el objeto remoto en el directorio, 
   * al ser este el host que da el servicio de registro RMI
   * (desde fuera no se puede)</div>
   * Al ser el primer servicio a registrar, comprueba que no existe, cuyo casi
   * se lanza AlreadyBoundException para que detecte que ya se est� ejecutando
   * una instancia del servidor
   * .
   * @param objetoRemoto es el objeto a registrar
   * 
   *****************************************************************************/ 
 public void registrarObjetoRemoto(String bind,Remote servicio)
 throws RemoteException,AlreadyBoundException
   {
   
   this.getRefRegistroRMI().bind(bind,servicio);  
   }//fin registrServicioDatos  
  
  
  
  /******************************************************************************
   * <div>Gestión de los registros en el registro RMI.</div>
   * <div>Se borra la referencia al objeto remoto en el directorio, al ser este el host
   * que da el servicio de registro RMI (desde fuera no se puede)</div>
   * 
   * @param nombreSimbolico es una cadena con el nombre que tiene asignado el
   *               objeto en el registro
   * @return false si hubo problema. 
   * 
   *****************************************************************************/  
   public Boolean desRegistrarObjetoRemoto(String nombreSimbolico) 
          throws RemoteException,NotBoundException
    {
    Boolean eliminado=false;    
    try
      {
     this.getRefRegistroRMI().unbind(nombreSimbolico); 
      //si no error
      eliminado=true;
      }
     catch (NotBoundException re)
      {
      System.out.println("Servicio RMI: no se localiza el objeto remoto");  
      }
     catch (Exception e)
      {
      e.printStackTrace();  
      }
    return eliminado;  
    }//fin registrarObjetoRemoto  
    
 }//fin clase RegistroRMI
