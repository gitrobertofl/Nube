package usuario;

import java.rmi.RemoteException;
import java.rmi.AlreadyBoundException;
import java.rmi.NotBoundException;


public class UsrRepositorio extends Usuario {
  //variables de instancia
  //Ruta donde se guardan los ficheros de los clientes
  private String FICHEROS_DE_REPOS="reposFile";
  
  //creamos un objeto para el servicio del repositorio para servidor
  private ServicioSrOperadorInterface servicioSrOperador;
  //creamos un objeto para el servicio del repositorio para el cliente
  private ServicioClOperadorInterface servicioClOperador;
  //GUI propio de repositorio
  GUIRepositorioInterface gUIRepositorio=(GUIRepositorioInterface)gUI;
	
  /*
   *
   *  Constructor por defecto. Llama al constructor de Usuario con la
   *  cadena static TIPO_REPOSITORIO   
   */	
  public UsrRepositorio()
	{
	super(TIPO_REPOSITORIO);	
	}//FIN CONSTRUCTOR Repositorio()

  /*=====metodos*/
  
  /****
   *
   *  Ya esta autentificado, ahora ejecuta los primeros pasos:
   *   iniciar los servicios del repositorio
   *   e iniciar el menu de repositorio
   *
   *  implementa el metodo abstracto de Usuario
   */
  @Override
  protected void inicioSesionUsuario(String iDRepositorio) 
			throws RemoteException, AlreadyBoundException,NotBoundException
	{
	//esta acreditado: obtener y marcar como activo y registrarlo en RMI
    servicioSrOperador=new ServicioSrOperadorImpl(iDRepositorio,FICHEROS_DE_REPOS);
    servicioClOperador=new ServicioClOperadorImpl(iDRepositorio,FICHEROS_DE_REPOS);
      
      
        System.out.println("hemos creado el objeto sr "+ servicioSrOperador.getNickRepositorio());
        System.out.println("hemos creado el objeto cl "+ servicioClOperador.getNickRepositorio());
        
    // los registra en RMI. con gestor, aqu√≠ no puede al ser otro host
    gestor.registraServiciosRepositorio(iDRepositorio,servicioSrOperador,servicioClOperador); 
    //entramos en menu repositorio acreditado
    menuRepositorio(iDRepositorio);
    //como vamos a salir, marcamos como repositorio inactivo,
	
	//y si tiene un cliente enganchado? avisar o no hacerlo

    //desactivamos la sesion
	autenticacion.desactivarUsuario(iDRepositorio,tipoUsuario);
    // desregistramos los servicios de RMI
    gestor.desRegistrarServiciosRepositorio(iDRepositorio);
    }//fin inicioSesionUsuairo
  

  /*=== metodos privados*/
   
  /*
   * menu del repositorio
   *
   */   
  private void menuRepositorio(String iDRepositorio)throws RemoteException
    {
    //opcion de menu
    Character opcion='0';
    
    String iDCliente="";
    
      do
          {
          opcion=gUI.menuUsuarioAcreditado(iDRepositorio);
          
          System.out.println("opcion devuelta es "+opcion);
          
          switch (opcion)
           {
           case '1'://listar clientes
                    gUIRepositorio.verListadoClientes(iDRepositorio,gestor.getListadoClientesRepo(iDRepositorio));
                    //vuelve al menu de inicio de repositorio
                    opcion='0';
                    break;
           case '2'://listar ficheros de cliente
                    //obtenemos nombre de cliente por consola y con el visualizamos el listado
                    iDCliente=gUIRepositorio.obtenerIDCliente(iDRepositorio);
                    gUIRepositorio.verListadoFicherosCliente(iDRepositorio,
                                                  iDCliente,
                                                  gestor.getListadoFicherosCliente(iDCliente));
                    
                    //vuelve al menu de inicio de repositorio
                    opcion='0'; 
                    break;
           case '3'://cerrar sesion de Repositorio (logout)
                    //no hace nada pues ya cierra el menu inicial los obj. remotos 
                    break;
           default :System.out.print("opcion erronea");   
           }//fin switch
       
          }
        while(opcion!='3');
      
      

}//fin menu


}//fin clase Repositorio
    
    
    