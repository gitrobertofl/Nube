package usuario;



import java.rmi.RemoteException;
import java.io.File;
import java.rmi.AlreadyBoundException;
import java.rmi.NotBoundException;
import java.io.FileNotFoundException;

/*INTERFAZ REMOT RECUERDA:CUANDO ACABES PASAR UNA COPIA AL OTRO PAQUETE*/


import servidor.NubeRMI;

/*FIN INTERFAZ REMOTA*/

/******************************************************************************
 * 
 * *  PRACTICA DE SISTEMAS DISTRIBUIDOS (20-21).
 *
 * <div>Esta es la clase que representa entidad Cliente.</div>
 * <div> Esta clase hereda los atributos y metodos de la clase abstracta 
 *       Usuario.</div>
 * <div> Implementa los metodo especificos de un cliente de nube</div>
 * 
 * 
 * 
 * Con licencia GPL v3
 * @see RegistroRMI
 * @see Usuario
 * @author Roberto J. de la Fuente Lopez 
 *         rfuente4@alumno.uned.es
 *         robertofl@aconute.es
 * @version 20210310
 * 
 ******************************************************************************/

public class Cliente extends Usuario 
  {
  /*==============================================================================
   * Atributos de la clase (static)
   ===============================================================================*/ 
  /*==============================================================================
   * Atributos de instancia
   ===============================================================================*/ 
  //creamos un objeto para el servicio del cliente para repo
  private ServicioDiscoClienteInterface servicioDiscoCliente;
  //objeto remoto para conexion con su repositorio
  private ServicioClOperadorInterface svcClOperador;
  //ID del repositorio asignado
  String iDRepoAsignado;
  //para GUI de cliente
  GUIClienteInterface gUICliente=(GUIClienteInterface)gUI;
  /*===============================================================================
   * Constructores de la clase
   * ==============================================================================*/  
  /******************************************************************************
   * Constructor por defecto. Llama al constructor Usuario en el que le dice el tipo
   * de usuario es. Usuario inicializa la conexiï¿½n con RMI.
   * ******************************************************************************/
  public Cliente()
	{
	super(TIPO_CLIENTE);
	}//fin constructor Cliente()

  
  /*================================================================================
        Metodos abstractos publicos o protected 
   ================================================================================*/
  /******************************************************************************
   * Este metodo se encarga de preparar el iniciar sesion como Cliente.
   * 
   * Una vez ha iniciado la sesion correctamente en Usuario,
   * nos manda a un menu con las operaciones del cliente, 
   * identificado por su ID. 
   * 
   * @param cadena con el ID del cliente
   * 
   * ******************************************************************************/
  @Override
  protected void inicioSesionUsuario(String iDCliente) 
		  throws RemoteException, AlreadyBoundException,NotBoundException
    {
	//asignamos una carpeta para la bajada de ficheros desde repo
	//el directorio raiz del paquete sera la ubicacion actual del cliente
	File directorio=new File("cliente_"+iDCliente);
	directorio.mkdirs();
	//crear y registrar servicio discoCliente en RMI    
    servicioDiscoCliente=new ServicioDiscoClienteImpl(iDCliente);
      
		System.out.println("MSG:hemos creado el objeto del servicio disco cliente "+ servicioDiscoCliente.getNickCliente());   
      
       
    gestor.registraServicioCliente(iDCliente,servicioDiscoCliente);
          
          
         System.out.println("MSG hemos registrado el objeto del servicio disco cliente "+ servicioDiscoCliente.getNickCliente()); 
    //entramos en menu de operaciones del cliente 
	menuCliente(iDCliente);
    //como vamos a salir, marcamos como cliente inactivo, 
    // si tiene un repo enganchado? avisar o no hacerlo
    autenticacion.desactivarUsuario(iDCliente,tipoUsuario); 
    // desregistramos los servicios de RMI
    gestor.desRegistrarServicioCliente(iDCliente);
                
	
	
        
 		
    }//fin inicioSesionUsuairo

  /*================================================================================
        Metodos publicos o protected 
   ================================================================================*/
  /******************************************************************************
   * Este metodo se encarga de mostrar las operaciones del cliente
   * 
   * @param cadena con el ID del cliente
   * 
   * ******************************************************************************/
  private void menuCliente(String iDCliente)
		 throws RemoteException, AlreadyBoundException,NotBoundException
    {
    //-------------------     variables ---------------------------------------------        
    //opcion de menu
    Character opcion='0';

    String nombreFichero="";
    //-------------------     cuerpo ---------------------------------------------        
  	  
 
    do
      {
      //visualizamos el menu y obtenemos operacion        
      opcion=gUI.menuUsuarioAcreditado(iDCliente);
      
      System.out.println("MSG opcion devuelta es "+opcion);
      
      switch (opcion)
        {
        case '1'://subir fichero
	             //si esta activo, obtenemos el ID del repo asignado

			//aqui la URL completa, no solo el ID. pERO LA URL ESTA EMBEDIDA EN NUBE
				 
                 iDRepoAsignado=gestor.repoAsignadoCliente(iDCliente);
                 // si repositorio asignado, esta activo
	             if (iDRepoAsignado!="")
	               {
	               //obtenemos referencia servicio cloperador del repo asignado
                   svcClOperador=NubeRMI.obtenerRefClOperadorRepo(iDRepoAsignado);
		           
                   //ordenamos a servidor que nos reserve carpeta en ese repositorio, si no lo tenia.
                   gestor.carpetaClienteEnRepo(iDCliente,iDRepoAsignado); 
                   //obtenemos el nombre del fichero
				   nombreFichero=gUICliente.nombreFichero(iDCliente); 
                   //si existe creamos el fichero, sino pantalla de error
                   if (nombreFichero.equals(""))
                     gUICliente.errorNombreFichero(iDCliente); 
                    else
                     //comprobamos si esta repetido en la base de datos
                     if (gestor.existeFichero(iDCliente,iDRepoAsignado,nombreFichero))
					   gUICliente.errorFicheroRepe (iDCliente);
                      else
                       {
                       try
					     {
					     Fichero fichero= new Fichero(nombreFichero,iDCliente);
                         /* AQUI CASCA SI EL FICHERO  a copiar NO EXISTE*/
                         
                         //notificamos fichero a la Base de datos (cliente,repo y nombre fichero)
                         gestor.subirFichero(iDCliente,iDRepoAsignado,nombreFichero);
                         //lo subimos al repositorio asignado.
                         //pedimos a svcClOperador que se quede con el fichero
                         svcClOperador.subirFichero(iDCliente,fichero);
                       
					     //controlar si ha subido el fichero 
                         }
						catch (FileNotFoundException e)
						 {
							gUICliente.errorFicheroNoExiste(iDCliente); 
							 
						 }//fin catch FileNotFoundException
						
					   
					   
					   
					   }//fin si no error de nombre de fichero
				   }//fin si repo asignado
	              else
                   {
	               gUICliente.avisoRepoNoActivo(iDCliente);	
                   }//fin si no repo asignado
		
          	     //vuelve al menu de inicio de cliente
                 opcion='0';
                 break;
        case '2'://bajar fichero
				 //si esta activo, obtenemos el ID del repo asignado

			//aqui la URL completa, no solo el ID. pERO LA URL ESTA EMBEDIDA EN NUBE
				 
                 iDRepoAsignado=gestor.repoAsignadoCliente(iDCliente);
                 // si repositorio asignado, esta activo
	             if (iDRepoAsignado!="")
	               {
	               //obtenemos referencia servicio Sroperador del repo asignado
                   //svcSrOperador=NubeRMI.obtenerRefSrOperadorRepo(iDRepoAsignado);
		           
                   //obtenemos el nombre del fichero
				   nombreFichero=gUICliente.nombreFichero(iDCliente); 
                   //si existe creamos el fichero, sino pantalla de error
                   if (nombreFichero.equals(""))
                     gUICliente.errorNombreFichero(iDCliente); 
                    else
                     //comprobamos si existe en la base de datos
				 
				 /*se puede eliminar si controlamos en bajarFichero*/
                     if (!gestor.existeFichero(iDCliente,iDRepoAsignado,nombreFichero))
					   gUICliente.errorFicheroNoExiste (iDCliente);
                      else
                       {
					   //gestor comprueba que existe, que se lo pasa a repositorio 
					   //que  usa el serviciodiscocliente 
                       if (!gestor.bajarFichero(iDCliente,iDRepoAsignado,nombreFichero))
						  gUICliente.errorBajadaFichero(iDCliente);
                        //a la base de datos le da igual
                       //controlar si ha BAJADO el fichero 
                       
					   
					   }//fin si no error de nombre de fichero
				   }//fin si repo asignado
	              else
                   {
	               gUICliente.avisoRepoNoActivo(iDCliente);	
                   }//fin si no repo asignado
		
           
                    //vuelve al menu de inicio de juego
                    opcion='0'; 
                    break;
        case '3'://borrar fichero
                 //si esta activo, obtenemos el ID del repo asignado

			//aqui la URL completa, no solo el ID. pERO LA URL ESTA EMBEDIDA EN NUBE
				 
                 iDRepoAsignado=gestor.repoAsignadoCliente(iDCliente);
                 // si repositorio asignado, esta activo
	             if (iDRepoAsignado!="")
	               {
	               //obtenemos referencia servicio cloperador del repo asignado
                   //svcClOperador=NubeRMI.obtenerRefClOperadorRepo(iDRepoAsignado);
		           
                   //obtenemos el nombre del fichero
				   nombreFichero=gUICliente.nombreFichero(iDCliente); 
                   //si existe creamos el fichero, sino pantalla de error
                   if (nombreFichero.equals(""))
                     gUICliente.errorNombreFichero(iDCliente); 
                    else
                     //comprobamos si esta en la base de datos
                     if (!gestor.existeFichero(iDCliente,iDRepoAsignado,nombreFichero))
					   gUICliente.errorFicheroNoExiste (iDCliente);
                      else
                       {
						   
                       Fichero fichero= new Fichero(nombreFichero,iDCliente);
                       /* AQUI CASCA SI EL FICHERO NO EXISTE ya controlado*/
                     
                       //notificamos fichero a la Base de datos (cliente,repo y nombre fichero)
                       gestor.borrarFichero(iDCliente,iDRepoAsignado,nombreFichero);
                       //lo borramos del repositorio asignado.
                       //pedimos a svcClOperador del repositorio que borre con el fichero
                       svcClOperador.borrarFichero(iDCliente,fichero);
                       
					   //controlar si ha borrado el fichero 
                       
					   
					   }//fin si no error de nombre de fichero
				   }//fin si repo asignado
	              else
                   {
	               gUICliente.avisoRepoNoActivo(iDCliente);	
                   }//fin si no repo asignado


                    //vuelve al menu de inicio de juego
                    opcion='0'; 
                    break;
           
        case '4'://compartir fichero
                    
                    //vuelve al menu de inicio de inicio de juego
                    opcion='0'; 
                    break;
        case '5'://listar ficheros
        	/*
                    gUICliente.verListadoFicherosCliente(IDRepoAsignado,
                                                  IDCliente,
                                                  gestor.getListadoFicherosCliente(IDRepoAsignado,IDCliente));
            */        //vuelve al menu de inicio de inicio de juego
                    opcion='0'; 
                    break;
        case '6'://Listar clientes del sistema                    
                //     gUICliente.verListadoClientes(gestor.getListadoClientesSistema());
                    //vuelve al menu de inicio de inicio de juego
                    opcion='0'; 
                    break; 
        case '7'://cerrar sesion de Cliente (logout)
           
                    //no hace nada pues ya cierra el menu inicial los obj. remotos 
                    break;
        default :System.out.print("opcion erronea");   
        }//fin switch
       
      }//fin bucle do
    while(opcion!='7');
      
      
       
  }//fin menu de cliente

	
}//fin clase Cliente